package pod_otel

import (
	"context"
	"fmt"
	lru "github.com/hashicorp/golang-lru/v2"
	"github.com/practice/opentelemetry-practice/pkg/opentelemetry/exporter"
	"github.com/practice/opentelemetry-practice/pkg/pod_otel/helpers/k8shelper"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/trace"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/tools/cache"
	"log"
)

var PodCtxSet *lru.Cache[types.UID, any]

func init() {
	set, err := lru.New[types.UID, any](1280)
	if err != nil {
		panic(err)
	}
	PodCtxSet = set
}
func isTestPod(poid *v1.Pod) bool {
	if poid.Name == "test" {
		return true
	}
	return false
}

type PodHandler struct {
	provider *trace.TracerProvider
}

func NewPodHandler() *PodHandler {
	return &PodHandler{
		provider: exporter.NewJaegerProvider(),
	}
}

func (p *PodHandler) OnAdd(obj interface{}, isInInitialList bool) {
	if pod, ok := obj.(*v1.Pod); ok {
		if !isTestPod(pod) {
			return
		}

		tracer := p.provider.Tracer("pods")
		newCtx, span := tracer.Start(context.Background(),
			pod.Spec.NodeName+" - "+pod.Name)
		defer span.End()
		carrier := propagation.MapCarrier{}
		otel.GetTextMapPropagator().Inject(newCtx, carrier) //注入
		defer func() {
			PodCtxSet.Add(pod.UID, carrier) //保存  头载体
		}()

		span.SetAttributes(
			attribute.KeyValue{
				Key:   "phase",
				Value: attribute.StringValue(string(pod.Status.Phase)),
			},
			attribute.KeyValue{
				Key:   "node",
				Value: attribute.StringValue(pod.Spec.NodeName),
			},
		)
	}

}

func (p *PodHandler) OnUpdate(oldObj, newObj interface{}) {
	if pod, ok := newObj.(*v1.Pod); ok {
		if !isTestPod(pod) {
			return
		}
		v, ok := PodCtxSet.Get(pod.UID)
		if !ok {
			log.Println("not found carrier:", pod.Name)
			return
		}
		// 从缓存读
		carrier := v.(propagation.TextMapCarrier)
		// 把载体信息（好比http 特定的头)注入到新的上下文
		newCtx := otel.GetTextMapPropagator().Extract(context.Background(), carrier)
		tracer := p.provider.Tracer("pods")
		info := k8shelper.PrintPod(pod)

		_, span := tracer.Start(newCtx,
			fmt.Sprintf("%s(%s) - %s ", pod.Name, info.ContainerReady, info.Reason))

		defer span.End()
		span.SetAttributes(
			attribute.KeyValue{
				Key:   "phase",
				Value: attribute.StringValue(string(pod.Status.Phase)),
			},
		)
	}
}

func (p *PodHandler) OnDelete(obj interface{}) {

}

var _ cache.ResourceEventHandler = &PodHandler{}
